"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DbOperationsCommand = void 0;
const common_1 = require("@nestjs/common");
const pc = require("picocolors");
const nest_console_1 = require("@squareboat/nest-console");
const service_1 = require("../service");
let DbOperationsCommand = class DbOperationsCommand {
    constructor() {
        this.migratorConfig = {
            directory: "./database/migrations",
            loadExtensions: [".js"],
        };
    }
    migrateStatus(_cli) {
        return __awaiter(this, void 0, void 0, function* () {
            const knex = service_1.ObjectionService.connection();
            const [completed, pending] = yield knex.migrate.list(this.migratorConfig);
            const statusList = [];
            for (const migration of completed) {
                statusList.push({ migration: migration.name, status: pc.green("Y") });
            }
            for (const migration of pending) {
                statusList.push({ migration: migration.file, status: pc.red("N") });
            }
            _cli.table(statusList);
        });
    }
    migrationUp(_cli) {
        return __awaiter(this, void 0, void 0, function* () {
            const knex = service_1.ObjectionService.connection();
            const [batch, migrations] = yield knex.migrate.latest(this.migratorConfig);
            if (migrations.length === 0) {
                _cli.info("No migrations to run");
                return;
            }
            _cli.info(`Batch Number: ${batch}`);
            for (const migration of migrations) {
                _cli.success(migration);
            }
        });
    }
    migrateRollback(_cli) {
        return __awaiter(this, void 0, void 0, function* () {
            const knex = service_1.ObjectionService.connection();
            const [batch, migrations] = yield knex.migrate.rollback(this.migratorConfig);
            if (migrations.length === 0) {
                _cli.info("No migrations to rollback. Already at the base migration");
                return;
            }
            _cli.info(`Reverted Batch: ${batch}`);
            for (const migration of migrations) {
                _cli.success(migration);
            }
        });
    }
    migrateReset(_cli) {
        return __awaiter(this, void 0, void 0, function* () {
            const knex = service_1.ObjectionService.connection();
            const confirm = yield _cli.confirm("Are you sure you want to reset your database? This action is irreversible.");
            if (!confirm) {
                _cli.info("Thank you! Exiting...");
                return;
            }
            const password = yield _cli.password("Please enter the password of the database to proceed");
            const [, migrations] = yield knex.migrate.down(this.migratorConfig);
            if (migrations.length === 0) {
                _cli.info("No migrations to rollback. Already at the base migration");
                return;
            }
            _cli.info("Rollback of following migrations are done:");
            for (const migration of migrations) {
                _cli.success(migration);
            }
        });
    }
    makeMigration(_cli) {
        return __awaiter(this, void 0, void 0, function* () {
            const knex = service_1.ObjectionService.connection();
            const res = yield knex.migrate.make(_cli.argument("name"), {
                directory: this.migratorConfig.directory,
                extension: "js",
            });
            const paths = res.split("/");
            _cli.success(paths[paths.length - 1]);
        });
    }
};
__decorate([
    (0, nest_console_1.Command)("migrate:status", {
        desc: "Command to show the status of all migrations",
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [nest_console_1.ConsoleIO]),
    __metadata("design:returntype", Promise)
], DbOperationsCommand.prototype, "migrateStatus", null);
__decorate([
    (0, nest_console_1.Command)("migrate", { desc: "Command to run the pending migrations" }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [nest_console_1.ConsoleIO]),
    __metadata("design:returntype", Promise)
], DbOperationsCommand.prototype, "migrationUp", null);
__decorate([
    (0, nest_console_1.Command)("migrate:rollback", {
        desc: "Command to rollback the previous batch of migrations",
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [nest_console_1.ConsoleIO]),
    __metadata("design:returntype", Promise)
], DbOperationsCommand.prototype, "migrateRollback", null);
__decorate([
    (0, nest_console_1.Command)("migrate:reset", {
        desc: "Command to reset the migration",
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [nest_console_1.ConsoleIO]),
    __metadata("design:returntype", Promise)
], DbOperationsCommand.prototype, "migrateReset", null);
__decorate([
    (0, nest_console_1.Command)("make:migration {name}", {
        desc: "Command to create a new migration",
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [nest_console_1.ConsoleIO]),
    __metadata("design:returntype", Promise)
], DbOperationsCommand.prototype, "makeMigration", null);
DbOperationsCommand = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [])
], DbOperationsCommand);
exports.DbOperationsCommand = DbOperationsCommand;

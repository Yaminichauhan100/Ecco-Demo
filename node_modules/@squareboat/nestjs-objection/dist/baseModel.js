"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseModel = void 0;
const objection_1 = require("objection");
const helpers_1 = require("./helpers");
const queryBuilder_1 = require("./queryBuilder");
class BaseModel extends objection_1.Model {
    $forceLoad(expression, options) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.$fetchGraph(expression, options);
        });
    }
    $load(expression, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const getKeys = (obj) => {
                const p = [];
                for (const key in obj) {
                    const o = { parent: key, children: [] };
                    if (key === "$recursive" || key === "$relation" || key === "$modify") {
                        continue;
                    }
                    const exp = obj[key];
                    if (typeof exp === "object") {
                        o.children = getKeys(exp);
                    }
                    p.push(o);
                }
                return p;
            };
            const p = getKeys(expression);
            const toBeLoadedRelations = {};
            const getUnloadedRelationsList = (model, rel, parent) => __awaiter(this, void 0, void 0, function* () {
                for (const o of rel) {
                    if (!model || !model[o.parent]) {
                        toBeLoadedRelations[parent !== "" ? `${parent}.${o.parent}` : o.parent] = true;
                    }
                    if (o.children.length > 0) {
                        getUnloadedRelationsList(model[o.parent], o.children, o.parent);
                    }
                }
            });
            yield getUnloadedRelationsList(this, p, "");
            const promises = [];
            const alreadyLoading = [];
            for (const key in toBeLoadedRelations) {
                const [parent] = key.split(".");
                if (!alreadyLoading.includes(parent)) {
                    promises.push(this.$fetchGraph((0, helpers_1.pick)(expression, parent), options));
                    alreadyLoading.push(parent);
                }
            }
            yield Promise.all(promises);
            return;
        });
    }
}
exports.BaseModel = BaseModel;
BaseModel.QueryBuilder = queryBuilder_1.CustomQueryBuilder;
BaseModel.useLimitInFirst = true;

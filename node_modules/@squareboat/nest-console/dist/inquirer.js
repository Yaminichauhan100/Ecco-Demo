"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Inquirer = void 0;
const inquirer = require("inquirer");
class Inquirer {
    static ask(question) {
        return __awaiter(this, void 0, void 0, function* () {
            const answers = yield inquirer.prompt([
                { name: "question", message: question },
            ]);
            return answers.question;
        });
    }
    static confirm(message) {
        return __awaiter(this, void 0, void 0, function* () {
            const answer = yield inquirer.prompt([
                { name: "confirm_once", message, type: "confirm" },
            ]);
            return answer.confirm_once;
        });
    }
    static select(message, choices, multiple = false) {
        return __awaiter(this, void 0, void 0, function* () {
            const type = multiple ? "checkbox" : "list";
            const name = "command";
            const answers = yield inquirer.prompt([{ type, name, message, choices }]);
            return answers.command;
        });
    }
    static password(message, mask = "") {
        return __awaiter(this, void 0, void 0, function* () {
            const type = "password", name = "command";
            const answers = yield inquirer.prompt([{ type, name, message, mask }]);
            return answers[name];
        });
    }
}
exports.Inquirer = Inquirer;

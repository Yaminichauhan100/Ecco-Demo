"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CommandRunner = void 0;
const pc = require("picocolors");
const consoleIO_1 = require("./consoleIO");
const logger_1 = require("./logger");
const yargsParser = require("yargs-parser");
const metadata_1 = require("./metadata");
class CommandRunner {
    static run(cmd) {
        return __awaiter(this, void 0, void 0, function* () {
            const argv = yargsParser(cmd);
            const command = metadata_1.CommandMeta.getCommand(argv._[0]);
            yield CommandRunner.handle(command, argv);
        });
    }
    static handle(command, args) {
        return __awaiter(this, void 0, void 0, function* () {
            if (command == null) {
                logger_1.Logger.error("No command found");
                return;
            }
            if (args.options) {
                CommandRunner.printOptions(command);
                return;
            }
            const _cli = consoleIO_1.ConsoleIO.from(command.expression, args);
            if (_cli.hasErrors && _cli.missingArguments.length > 0) {
                _cli.error(` Missing Arguments: ${_cli.missingArguments.join(", ")} `);
                return;
            }
            yield command.target(_cli);
            return;
        });
    }
    static printOptions(command) {
        console.log(pc.bold("Expression: ") + command.expression);
        if (command.meta.desc) {
            console.log(pc.bold("Description: ") + command.meta.desc);
        }
        console.log("\n");
        if (command.arguments.length > 0) {
            logger_1.Logger.success(pc.bgBlue(pc.white(pc.bold(" Arguments "))));
            const list = [];
            for (const argument of command.arguments) {
                console.log(argument);
                list.push({
                    name: argument.name,
                    desc: "No description passed",
                    default: argument.defaultValue,
                    isArray: argument.isArray ? "Y" : "N",
                });
            }
            logger_1.Logger.table(list);
        }
        if (command.options.length > 0) {
            logger_1.Logger.success(pc.bgBlue(pc.white(pc.bold(" Options "))));
            const list = [];
            for (const option of command.options) {
                list.push({
                    name: option.name,
                    desc: "",
                    default: option.defaultValue || "null",
                    isArray: option.isArray ? "Y" : "N",
                });
            }
            logger_1.Logger.table(list);
        }
    }
}
exports.CommandRunner = CommandRunner;

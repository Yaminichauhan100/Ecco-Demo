"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ListCommands = void 0;
const common_1 = require("@nestjs/common");
const decorators_1 = require("../decorators");
const metadata_1 = require("../metadata");
const pc = require("picocolors");
let ListCommands = class ListCommands {
    handle(_cli) {
        return __awaiter(this, void 0, void 0, function* () {
            const commands = metadata_1.CommandMeta.getAllCommands();
            const keys = Object.keys(commands).sort().reverse();
            const commandGroups = { "#": [] };
            for (const key of keys) {
                const c = key.split(":");
                if (c.length === 1) {
                    if (commandGroups[c[0]]) {
                        commandGroups[c[0]].push(key);
                    }
                    else {
                        commandGroups["#"].push(c[0]);
                    }
                }
                else {
                    if (commandGroups[c[0]]) {
                        commandGroups[c[0]].push(key);
                    }
                    else {
                        commandGroups[c[0]] = [key];
                    }
                }
            }
            for (const group in commandGroups) {
                _cli.success(pc.bgBlue(pc.white(pc.bold(" " + group + " "))));
                const list = [];
                const sortedCommands = commandGroups[group].sort();
                for (const command of sortedCommands) {
                    const options = commands[command].meta || {};
                    list.push({
                        command: pc.green(pc.bold(command)),
                        description: options.desc || "No Description Passed",
                    });
                }
                _cli.table(list);
            }
        });
    }
};
ListCommands = __decorate([
    (0, common_1.Injectable)(),
    (0, decorators_1.Command)("list", { desc: "Command to list all the commands" })
], ListCommands);
exports.ListCommands = ListCommands;

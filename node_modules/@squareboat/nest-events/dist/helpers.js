"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Package = exports.difference = exports.EmitEvent = exports.isEmpty = exports.isArray = exports.isObject = void 0;
function isObject(value) {
    if (typeof value === "object" && value !== null) {
        return true;
    }
    return false;
}
exports.isObject = isObject;
function isArray(value) {
    return Array.isArray(value);
}
exports.isArray = isArray;
function isEmpty(value) {
    if (Array.isArray(value) && value.length < 1)
        return true;
    if (isObject(value) && Object.keys(value).length < 1)
        return true;
    if (!value)
        return true;
    return false;
}
exports.isEmpty = isEmpty;
function EmitEvent(event) {
    return __awaiter(this, void 0, void 0, function* () {
        yield event.emit();
        return;
    });
}
exports.EmitEvent = EmitEvent;
function difference(arr1, arr2) {
    if (!isArray(arr1) || !isArray(arr2))
        return [];
    const keyMap = {};
    const difference = [];
    for (const val of arr2) {
        keyMap[val] = true;
    }
    for (const val of arr1) {
        if (!keyMap[val]) {
            difference.push(val);
        }
    }
    return difference;
}
exports.difference = difference;
class Package {
    static load(pkgName) {
        try {
            return require(pkgName);
        }
        catch (e) {
            console.error(` ${pkgName} is missing. Please make sure that you have installed the package first `);
            process.exitCode = 1;
            process.exit();
        }
    }
}
exports.Package = Package;
